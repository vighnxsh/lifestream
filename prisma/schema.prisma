generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(RECIPIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  bloodRequests BloodRequest[]
  donations     Donation[]
}

model BloodInventory {
  id            String         @id @default(cuid())
  bloodType     BloodType
  quantity      Int            @default(0)
  expiryDate    DateTime
  status        Status         @default(AVAILABLE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bloodRequests BloodRequest[]
  donations     Donation[]
}

model Donation {
  id               String          @id @default(cuid())
  donorId          String
  bloodInventoryId String?
  donationDate     DateTime
  quantity         Int             @default(1)
  status           DonationStatus  @default(SCHEDULED)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bloodInventory   BloodInventory? @relation(fields: [bloodInventoryId], references: [id])
  donor            User            @relation(fields: [donorId], references: [id])
}

model Appointment {
  id              String            @id @default(cuid())
  userId          String
  appointmentDate DateTime
  status          AppointmentStatus @default(SCHEDULED)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
}

model BloodRequest {
  id               String          @id @default(cuid())
  requesterId      String
  bloodInventoryId String?
  bloodType        BloodType
  quantity         Int             @default(1)
  urgency          RequestUrgency  @default(NORMAL)
  status           RequestStatus   @default(PENDING)
  requestDate      DateTime        @default(now())
  fulfilledDate    DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bloodInventory   BloodInventory? @relation(fields: [bloodInventoryId], references: [id])
  requester        User            @relation(fields: [requesterId], references: [id])
}

enum UserRole {
  ADMIN
  DONOR
  RECIPIENT
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Status {
  AVAILABLE
  RESERVED
  USED
  EXPIRED
}

enum DonationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum RequestUrgency {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum RequestStatus {
  PENDING
  APPROVED
  FULFILLED
  REJECTED
  CANCELLED
}
